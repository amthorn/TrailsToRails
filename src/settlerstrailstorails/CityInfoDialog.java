/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CityInfoDialog.java
 *
 * Created on Sep 22, 2013, 7:23:30 PM
 */
package settlerstrailstorails;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.text.NumberFormat;
import java.util.Locale;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.border.BevelBorder;

/**
 *
 * @author User 1
 */
class CityInfoDialog extends javax.swing.JFrame {
    
    String name, Player;
    Player.Color colorOfPlayerOne;
    double coalProb=0, wheatProb=0, oreProb=0, lumberProb=0, cattleProb=0,
            noneProb=0,anyProb=0;
    boolean mouseOnXButton,mouseOnPlayerInfoButton,buttonPressed;
    Player owner=null;
    CityHex city;
    gameFrame game_Frame;    
    AvaJButton deliverGoods;
    CityInfoDialog(Player.Color c,gameFrame g) {
        initComponents();
        try{
            setIconImage(ImageIO.read(getClass().getResource("/settlerstrailstorails/resources/icon.png")));
        }catch(Exception e){
            
        }
        deliverGoods = new AvaJButton(deliverGoods1);
        deliverGoods.setVisible(false);
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
        colorOfPlayerOne=c;
        playerInfoButton.setVisible(false);
        game_Frame=g;
    }
    CityInfoDialog(gameFrame g) {
        initComponents();
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
        try{
            setIconImage(ImageIO.read(getClass().getResource("/settlerstrailstorails/resources/icon.png")));
        }catch(Exception e){
            
        }
        playerInfoButton.setVisible(false);
        deliverGoods = new AvaJButton(deliverGoods1);
        deliverGoods.setVisible(false);
        game_Frame=g;
    }
    public void setColor(Player.Color c){
        colorOfPlayerOne=c;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        xButton = new javax.swing.JButton();
        playerInfoButton = new javax.swing.JButton();
        anyRawLabel = new javax.swing.JLabel();
        noneRawLabel = new javax.swing.JLabel();
        blockedByRobberLabel = new javax.swing.JLabel();
        goodsBeenDeliveredVariableLabel = new javax.swing.JLabel();
        goodsDeliveredByVariableLabel = new javax.swing.JLabel();
        isolatedVariableLabel = new javax.swing.JLabel();
        goldAcquiredForSettlingVariableLabel = new javax.swing.JLabel();
        goldAcquiredForSettlingLabel = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        otherInformationLabel = new javax.swing.JLabel();
        nameOfCityLabel = new javax.swing.JLabel();
        ownedByLabel = new javax.swing.JLabel();
        ownedByNameLabel = new javax.swing.JLabel();
        coalProbLabel = new javax.swing.JLabel();
        lumberRawLabel = new javax.swing.JLabel();
        cattleRawLabel = new javax.swing.JLabel();
        oreRawLabel = new javax.swing.JLabel();
        wheatRawLabel = new javax.swing.JLabel();
        coalRawLabel = new javax.swing.JLabel();
        probabilitiesLabel = new javax.swing.JLabel();
        wheatProbLabel = new javax.swing.JLabel();
        oreProbLabel = new javax.swing.JLabel();
        cattleProbLabel = new javax.swing.JLabel();
        lumberProbLabel = new javax.swing.JLabel();
        noneProbLabel = new javax.swing.JLabel();
        anyProbLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        deliverGoods1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        background = new javax.swing.JLabel();

        setAlwaysOnTop(true);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setOpaque(false);
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        xButton.setBackground(new java.awt.Color(239, 228, 176));
        xButton.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 36));
        xButton.setText("X");
        xButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        xButton.setContentAreaFilled(false);
        xButton.setFocusable(false);
        xButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        xButton.setMaximumSize(new java.awt.Dimension(50, 50));
        xButton.setMinimumSize(new java.awt.Dimension(40, 40));
        xButton.setPreferredSize(new java.awt.Dimension(40, 40));
        xButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                xButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                xButtonMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                xButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                xButtonMouseReleased(evt);
            }
        });
        xButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xButtonActionPerformed(evt);
            }
        });
        jPanel1.add(xButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 20, 40, 40));

        playerInfoButton.setBackground(new java.awt.Color(239, 228, 176));
        playerInfoButton.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 12));
        playerInfoButton.setText("Info");
        playerInfoButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        playerInfoButton.setContentAreaFilled(false);
        playerInfoButton.setFocusable(false);
        playerInfoButton.setOpaque(true);
        playerInfoButton.setPreferredSize(new java.awt.Dimension(75, 25));
        playerInfoButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                playerInfoButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                playerInfoButtonMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                playerInfoButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                playerInfoButtonMouseReleased(evt);
            }
        });
        playerInfoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playerInfoButtonActionPerformed(evt);
            }
        });
        jPanel1.add(playerInfoButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 58, 50, -1));

        anyRawLabel.setFont(new java.awt.Font("Arial", 1, 18));
        anyRawLabel.setText("  Any  =");
        jPanel1.add(anyRawLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 260, -1, -1));

        noneRawLabel.setFont(new java.awt.Font("Arial", 1, 18));
        noneRawLabel.setText("None  =");
        jPanel1.add(noneRawLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 204, -1, -1));

        blockedByRobberLabel.setFont(new java.awt.Font("Arial", 1, 18));
        jPanel1.add(blockedByRobberLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 350, -1, -1));

        goodsBeenDeliveredVariableLabel.setFont(new java.awt.Font("Arial", 1, 18));
        jPanel1.add(goodsBeenDeliveredVariableLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 380, -1, -1));

        goodsDeliveredByVariableLabel.setFont(new java.awt.Font("Arial", 1, 18));
        jPanel1.add(goodsDeliveredByVariableLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(205, 410, -1, -1));

        isolatedVariableLabel.setFont(new java.awt.Font("Arial", 1, 18));
        jPanel1.add(isolatedVariableLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(102, 439, -1, -1));

        goldAcquiredForSettlingVariableLabel.setFont(new java.awt.Font("Arial", 1, 18));
        jPanel1.add(goldAcquiredForSettlingVariableLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(255, 470, -1, -1));

        goldAcquiredForSettlingLabel.setFont(new java.awt.Font("Arial", 1, 18));
        goldAcquiredForSettlingLabel.setText("Gold acquired for settling:");
        jPanel1.add(goldAcquiredForSettlingLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 470, -1, -1));

        jLabel13.setFont(new java.awt.Font("Arial", 1, 18));
        jLabel13.setText("Isolated:");
        jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 440, -1, -1));

        jLabel12.setFont(new java.awt.Font("Arial", 1, 18));
        jLabel12.setText("Goods delivered by:");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 410, -1, -1));

        jLabel11.setFont(new java.awt.Font("Arial", 1, 18));
        jLabel11.setText("Goods been delivered:");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 380, -1, -1));

        jLabel10.setFont(new java.awt.Font("Arial", 1, 18));
        jLabel10.setText("Currently block by Robber:");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 350, -1, -1));

        otherInformationLabel.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 24));
        otherInformationLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        otherInformationLabel.setText("Other Information");
        jPanel1.add(otherInformationLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 310, 380, -1));

        nameOfCityLabel.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 24));
        nameOfCityLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        nameOfCityLabel.setText("Name of City");
        jPanel1.add(nameOfCityLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 380, -1));

        ownedByLabel.setFont(new java.awt.Font("Arial", 1, 18));
        ownedByLabel.setText("Owned by:");
        jPanel1.add(ownedByLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 60, -1, -1));

        ownedByNameLabel.setFont(new java.awt.Font("Arial", 1, 18));
        jPanel1.add(ownedByNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 60, -1, -1));

        coalProbLabel.setFont(new java.awt.Font("Arial", 1, 18));
        jPanel1.add(coalProbLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(105, 138, -1, -1));

        lumberRawLabel.setFont(new java.awt.Font("Arial", 1, 18));
        lumberRawLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/settlerstrailstorails/resources/lumberRaw.png"))); // NOI18N
        lumberRawLabel.setText("   =");
        jPanel1.add(lumberRawLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 135, -1, -1));

        cattleRawLabel.setFont(new java.awt.Font("Arial", 1, 18));
        cattleRawLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/settlerstrailstorails/resources/cattleRaw.png"))); // NOI18N
        cattleRawLabel.setText("   =");
        jPanel1.add(cattleRawLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 263, -1, -1));

        oreRawLabel.setFont(new java.awt.Font("Arial", 1, 18));
        oreRawLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/settlerstrailstorails/resources/oreRaw.png"))); // NOI18N
        oreRawLabel.setText("   =");
        jPanel1.add(oreRawLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 218, -1, -1));

        wheatRawLabel.setFont(new java.awt.Font("Arial", 1, 18));
        wheatRawLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/settlerstrailstorails/resources/wheatRaw.png"))); // NOI18N
        wheatRawLabel.setText("   =");
        jPanel1.add(wheatRawLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 173, -1, -1));

        coalRawLabel.setFont(new java.awt.Font("Arial", 1, 18));
        coalRawLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/settlerstrailstorails/resources/coalRaw.png"))); // NOI18N
        coalRawLabel.setText("   =");
        jPanel1.add(coalRawLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 128, -1, -1));

        probabilitiesLabel.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 24));
        probabilitiesLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        probabilitiesLabel.setText("Probabilities");
        jPanel1.add(probabilitiesLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 90, 380, -1));

        wheatProbLabel.setFont(new java.awt.Font("Arial", 1, 18));
        jPanel1.add(wheatProbLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(105, 183, -1, -1));

        oreProbLabel.setFont(new java.awt.Font("Arial", 1, 18));
        jPanel1.add(oreProbLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(105, 228, -1, -1));

        cattleProbLabel.setFont(new java.awt.Font("Arial", 1, 18));
        jPanel1.add(cattleProbLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(105, 273, -1, -1));

        lumberProbLabel.setFont(new java.awt.Font("Arial", 1, 18));
        jPanel1.add(lumberProbLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 145, -1, -1));

        noneProbLabel.setFont(new java.awt.Font("Arial", 1, 18));
        jPanel1.add(noneProbLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 205, -1, -1));

        anyProbLabel.setFont(new java.awt.Font("Arial", 1, 18));
        jPanel1.add(anyProbLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 261, -1, -1));

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setOpaque(false);
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        deliverGoods1.setBackground(new java.awt.Color(239, 228, 176));
        deliverGoods1.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12));
        deliverGoods1.setText("Deliver Goods");
        deliverGoods1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        deliverGoods1.setContentAreaFilled(false);
        deliverGoods1.setFocusable(false);
        deliverGoods1.setOpaque(true);
        deliverGoods1.setPreferredSize(new java.awt.Dimension(75, 25));
        deliverGoods1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                deliverGoods1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                deliverGoods1MouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                deliverGoods1MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                deliverGoods1MouseReleased(evt);
            }
        });
        deliverGoods1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deliverGoods1ActionPerformed(evt);
            }
        });
        jPanel3.add(deliverGoods1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 69, 90, -1));

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 310, 350, 190));

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setOpaque(false);
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 120, 350, 189));

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/settlerstrailstorails/resources/MainMenuBackground.png"))); // NOI18N
        jPanel1.add(background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 380, 520));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 520));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    void changeCity(CityHex c) {
        //if no other cityInfowindows are open
        owner=c.getOwner();
        city=c;
        coalProb = cattleProb = wheatProb = oreProb = lumberProb = noneProb = anyProb = 0;
        nameOfCityLabel.setText(c.getName());
        if (c.getOwner() == null) {
            ownedByNameLabel.setText("Nobody");
            playerInfoButton.setVisible(false);
        } else {
            ownedByNameLabel.setText(c.getOwner().toString());
            playerInfoButton.setVisible(true);
        }
        double h1 = 0, h2 = 0, h3 = 0, anyCount = 0;
        h1 = c.getHexOne().getProbability();
        if (c.getHexOne().getResource() == Hex.Resource.CATTLE) {
            cattleProb += h1;
        } else if (c.getHexOne().getResource() == Hex.Resource.COAL) {
            coalProb += h1;
        } else if (c.getHexOne().getResource() == Hex.Resource.WHEAT) {
            wheatProb += h1;
        } else if (c.getHexOne().getResource() == Hex.Resource.ORE) {
            oreProb += h1;
        } else if (c.getHexOne().getResource() == Hex.Resource.LUMBER) {
            lumberProb += h1;
        }
        anyCount += h1;
        //if h1 and h2 are the same, ignore the probabiliy of h2
        if (c.getHexTwo() != null) {
            if (!c.getHexOne().probEquals(c.getHexTwo())) {
                h2 = c.getHexTwo().getProbability();
                if (c.getHexTwo().getResource() == Hex.Resource.CATTLE) {
                    cattleProb += h2;
                } else if (c.getHexTwo().getResource() == Hex.Resource.COAL) {
                    coalProb += h2;
                } else if (c.getHexTwo().getResource() == Hex.Resource.WHEAT) {
                    wheatProb += h2;
                } else if (c.getHexTwo().getResource() == Hex.Resource.ORE) {
                    oreProb += h2;
                } else if (c.getHexTwo().getResource() == Hex.Resource.LUMBER) {
                    lumberProb += h2;
                }
                if (c.getHexOne().getChit() != c.getHexTwo().getChit()) {
                    anyCount += h2;
                }
            }
        }
        //if hex 3 equals hex 2 or 1, ignore hex 3
        if (c.getHexThree() != null) {
            if (!c.getHexOne().probEquals(c.getHexThree()) && (!c.getHexTwo().probEquals(c.getHexThree()))) {
                h3 = c.getHexThree().getProbability();
                if (c.getHexThree().getResource() == Hex.Resource.CATTLE) {
                    cattleProb += h3;
                } else if (c.getHexThree().getResource() == Hex.Resource.COAL) {
                    coalProb += h3;
                } else if (c.getHexThree().getResource() == Hex.Resource.WHEAT) {
                    wheatProb += h3;
                } else if (c.getHexThree().getResource() == Hex.Resource.ORE) {
                    oreProb += h3;
                } else if (c.getHexThree().getResource() == Hex.Resource.LUMBER) {
                    lumberProb += h3;
                }
                if (c.getHexOne().getChit() != c.getHexThree().getChit() && c.getHexTwo().getChit() != c.getHexThree().getChit()) {
                    anyCount += h3;
                }
            }
        }
        anyProb = anyCount;
        noneProb = 1 - anyProb;
        NumberFormat n = NumberFormat.getPercentInstance(Locale.ENGLISH);
        coalProbLabel.setText(String.valueOf(n.format(coalProb)));
        cattleProbLabel.setText(String.valueOf(n.format(cattleProb)));
        wheatProbLabel.setText(String.valueOf(n.format(wheatProb)));
        oreProbLabel.setText(String.valueOf(n.format(oreProb)));
        lumberProbLabel.setText(String.valueOf(n.format(lumberProb)));
        noneProbLabel.setText(String.valueOf(n.format(noneProb)));
        anyProbLabel.setText(String.valueOf(n.format(anyProb)));
        if (c.getBlockedByRobber()) {
            blockedByRobberLabel.setText("Yes");
        } else {
            blockedByRobberLabel.setText("No");
        }
        if (c.getBeenDelivered()) {
            goodsBeenDeliveredVariableLabel.setText("Yes");
        } else {
            goodsBeenDeliveredVariableLabel.setText("No");
        }
        if (c.getPlayerDelivered() == null) {
            goodsDeliveredByVariableLabel.setText("Nobody");
        } else {
            goodsDeliveredByVariableLabel.setText(c.getPlayerDelivered().getName());
        }
        goldAcquiredForSettlingVariableLabel.setText(String.valueOf(c.getGoldWorth()));
        if(c.isIsolated()) {
            isolatedVariableLabel.setText("Yes");
        } else {
            isolatedVariableLabel.setText("No");
        }
        //find out if the city can be delivered to
        deliverGoods.setVisible(false);
        if(c.getUpRail()!=null && c.getUpRail().hasTrain() && ((c.getUpRail().getTrainOneColor() == game_Frame.getCurrPlayer().getColor() && 
                c.getUpRail().getTrainOneColor() != null) || (c.getUpRail().getTrainTwoColor() == game_Frame.getCurrPlayer().getColor() && 
                c.getUpRail().getTrainTwoColor() != null)) && game_Frame.getCurrPlayer()!=c.getOwner() && game_Frame.getCurrPlayer().canDeliver() && !c.getBeenDelivered() && c.isOwned()){
            deliverGoods.setVisible(true);
        }
        if(c.getHorRail()!=null && c.getHorRail().hasTrain() && ((c.getHorRail().getTrainOneColor() == game_Frame.getCurrPlayer().getColor() && 
                c.getHorRail().getTrainOneColor() != null) || (c.getHorRail().getTrainTwoColor() == game_Frame.getCurrPlayer().getColor() && 
                c.getHorRail().getTrainTwoColor() != null)) && game_Frame.getCurrPlayer()!=c.getOwner() && game_Frame.getCurrPlayer().canDeliver() &&!c.getBeenDelivered() && c.isOwned()){
            deliverGoods.setVisible(true);
        }if(c.getDownRail()!=null && c.getDownRail().hasTrain() && ((c.getDownRail().getTrainOneColor() == game_Frame.getCurrPlayer().getColor() && 
                c.getDownRail().getTrainOneColor() != null) || (c.getDownRail().getTrainTwoColor() == game_Frame.getCurrPlayer().getColor() && 
                c.getDownRail().getTrainTwoColor() != null)) && game_Frame.getCurrPlayer()!=c.getOwner() && game_Frame.getCurrPlayer().canDeliver() &&!c.getBeenDelivered() && c.isOwned()){
            deliverGoods.setVisible(true);
        }
    }
    private void xButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xButtonActionPerformed
        
    }//GEN-LAST:event_xButtonActionPerformed
    private void xButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_xButtonMouseEntered
        mouseOnXButton=true;
    }//GEN-LAST:event_xButtonMouseEntered
    private void xButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_xButtonMouseExited
        if(mouseOnXButton&&buttonPressed){
            xButton.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
            xButton.setLocation(xButton.getX() + 1, xButton.getY());
        }
        mouseOnXButton=false;
        buttonPressed=false;
    }//GEN-LAST:event_xButtonMouseExited
    private void xButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_xButtonMousePressed
        gameFrame.playSound("click");
        xButton.setBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED));
        xButton.setLocation(xButton.getX()-1, xButton.getY());
        buttonPressed=true;
    }//GEN-LAST:event_xButtonMousePressed
    private void xButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_xButtonMouseReleased
        buttonPressed=false;
        if(mouseOnXButton) {
            xButton.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
            xButton.setLocation(xButton.getX() + 1, xButton.getY());
            this.setVisible(false);
        }
    }//GEN-LAST:event_xButtonMouseReleased

    private void playerInfoButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerInfoButtonMouseEntered
        mouseOnPlayerInfoButton=true;
}//GEN-LAST:event_playerInfoButtonMouseEntered

    private void playerInfoButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerInfoButtonMouseExited
        if(mouseOnPlayerInfoButton&&buttonPressed){
            playerInfoButton.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
            playerInfoButton.setLocation(playerInfoButton.getX() + 1, playerInfoButton.getY());
        }
        mouseOnPlayerInfoButton=false;
        buttonPressed=false;
}//GEN-LAST:event_playerInfoButtonMouseExited

    private void playerInfoButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerInfoButtonMousePressed
        gameFrame.playSound("click");
        playerInfoButton.setBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED));
        playerInfoButton.setLocation(playerInfoButton.getX()-1, playerInfoButton.getY());
        buttonPressed=true;
}//GEN-LAST:event_playerInfoButtonMousePressed

    private void playerInfoButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerInfoButtonMouseReleased
        buttonPressed=false;
        if(mouseOnPlayerInfoButton) {
            playerInfoButton.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
            playerInfoButton.setLocation(playerInfoButton.getX() + 1, playerInfoButton.getY());
            buttonPressed=false;
            if(owner!=null){
                this.setVisible(false);
                new PlayerInfoWindow(owner).setVisible(true);
            }
        }
}//GEN-LAST:event_playerInfoButtonMouseReleased

    private void playerInfoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playerInfoButtonActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_playerInfoButtonActionPerformed

    private void deliverGoods1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deliverGoods1MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_deliverGoods1MouseEntered

    private void deliverGoods1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deliverGoods1MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_deliverGoods1MouseExited

    private void deliverGoods1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deliverGoods1MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_deliverGoods1MousePressed

    private void deliverGoods1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deliverGoods1MouseReleased
        game_Frame.deliverGoods(city, game_Frame.getCurrPlayer());
        deliverGoods.setVisible(false);
        game_Frame.checkWinner();
    }//GEN-LAST:event_deliverGoods1MouseReleased

    private void deliverGoods1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deliverGoods1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deliverGoods1ActionPerformed

    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel anyProbLabel;
    private javax.swing.JLabel anyRawLabel;
    private javax.swing.JLabel background;
    private javax.swing.JLabel blockedByRobberLabel;
    private javax.swing.JLabel cattleProbLabel;
    private javax.swing.JLabel cattleRawLabel;
    private javax.swing.JLabel coalProbLabel;
    private javax.swing.JLabel coalRawLabel;
    private javax.swing.JButton deliverGoods1;
    private javax.swing.JLabel goldAcquiredForSettlingLabel;
    private javax.swing.JLabel goldAcquiredForSettlingVariableLabel;
    private javax.swing.JLabel goodsBeenDeliveredVariableLabel;
    private javax.swing.JLabel goodsDeliveredByVariableLabel;
    private javax.swing.JLabel isolatedVariableLabel;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel lumberProbLabel;
    private javax.swing.JLabel lumberRawLabel;
    private javax.swing.JLabel nameOfCityLabel;
    private javax.swing.JLabel noneProbLabel;
    private javax.swing.JLabel noneRawLabel;
    private javax.swing.JLabel oreProbLabel;
    private javax.swing.JLabel oreRawLabel;
    private javax.swing.JLabel otherInformationLabel;
    private javax.swing.JLabel ownedByLabel;
    private javax.swing.JLabel ownedByNameLabel;
    private javax.swing.JButton playerInfoButton;
    private javax.swing.JLabel probabilitiesLabel;
    private javax.swing.JLabel wheatProbLabel;
    private javax.swing.JLabel wheatRawLabel;
    private javax.swing.JButton xButton;
    // End of variables declaration//GEN-END:variables
}
