
package settlerstrailstorails;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.border.BevelBorder;

/**
 *
 * @author User 1
 */
public class InGameOptionsMenu extends javax.swing.JFrame {
    
    ArrayList<String> allMessages;
    gameFrame game_Frame;
    boolean mouseOnBackButton=false,buttonPressed=false,doubleGold=false,
            mouseOnCheatButton,mouseOnGameInfoButton,mouseOnBackGameInfoButton,
            mouseOnOkGameInfoButton;
    int volumeInt;
    ArrayList<Integer> cumulativeRolls;
    SettlersConfirmDialog scd;
    ImageIcon barGraphLink;
    long time;
    Player[] p;
    Player currP;
    int numOfPlayers;
    Rail currR;
    

    /** Creates new form InGameOptionsMenu */
    InGameOptionsMenu(ArrayList<String> s, gameFrame g, int volumeInt, boolean doubleGold,
            ArrayList<Integer> cumulativeRolls, long time, Player[] p,int numOfPlayers, Player currP){
        this.currP=currP;
        this.numOfPlayers=numOfPlayers;
        this.p=p;
        this.time=time;
        this.cumulativeRolls=cumulativeRolls;
        game_Frame=g;
        allMessages=s;
        this.volumeInt=volumeInt;
        this.doubleGold=doubleGold;
        initComponents();
        buildingPhaseBox.setSelected(!g.getIgnoreBuildingPhase());
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
        try{
            setIconImage(ImageIO.read(getClass().getResource("/settlerstrailstorails/resources/icon.png")));
        }catch(Exception e){
            
        }
        gameInfoPanel.setVisible(false);
        try{
            barGraphLink = new ImageIcon(ImageIO.read(getClass().getResource(
                                "/settlerstrailstorails/resources/barGraphLink.png")));
        }catch(IOException e){
            
        }
    }
    public InGameOptionsMenu() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gameInfoPanel = new javax.swing.JPanel();
        diceProbPanel = new javax.swing.JPanel();
        actualDiceProbLabel = new javax.swing.JLabel();
        totalRollsLabel = new javax.swing.JLabel();
        totalRollsVarLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        twoBar = new javax.swing.JLabel();
        threeBar = new javax.swing.JLabel();
        fourBar = new javax.swing.JLabel();
        fiveBar = new javax.swing.JLabel();
        sixBar = new javax.swing.JLabel();
        sevenBar = new javax.swing.JLabel();
        eightBar = new javax.swing.JLabel();
        nineBar = new javax.swing.JLabel();
        tenBar = new javax.swing.JLabel();
        elevenBar = new javax.swing.JLabel();
        twelveBar = new javax.swing.JLabel();
        gameInformationLabel = new javax.swing.JLabel();
        okGameInfoButton = new javax.swing.JButton();
        backGameInfoButton = new javax.swing.JButton();
        timeTheGameBeganLabel = new javax.swing.JLabel();
        timeTheGameBeganVar = new javax.swing.JLabel();
        timeYouveBeenPlayingLabel = new javax.swing.JLabel();
        timeYouveBeenPlayingVar = new javax.swing.JLabel();
        timeEstimatedLeftLabel = new javax.swing.JLabel();
        timeEstimatedLeftVar = new javax.swing.JLabel();
        inGameOptionsPanel = new javax.swing.JPanel();
        borderPanel4 = new javax.swing.JPanel();
        cheatsLabel = new javax.swing.JLabel();
        cheatField = new javax.swing.JTextField();
        cheatButton = new javax.swing.JButton();
        borderPanel3 = new javax.swing.JPanel();
        buildingPhaseBox = new javax.swing.JCheckBox();
        borderPanel5 = new javax.swing.JPanel();
        technicalOptionsLabel = new javax.swing.JLabel();
        volumeSlider = new javax.swing.JSlider();
        softToLoudLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        settingsLabel = new javax.swing.JLabel();
        okButton = new javax.swing.JButton();
        gameInfoButton = new javax.swing.JButton();
        backgroundLabel = new javax.swing.JLabel();

        setAlwaysOnTop(true);
        setMinimumSize(new java.awt.Dimension(383, 520));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        gameInfoPanel.setOpaque(false);
        gameInfoPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        diceProbPanel.setBackground(new java.awt.Color(239, 228, 176));
        diceProbPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        diceProbPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        actualDiceProbLabel.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14));
        actualDiceProbLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        actualDiceProbLabel.setText("Actual Dice Probabilities");
        diceProbPanel.add(actualDiceProbLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 180, -1));

        totalRollsLabel.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14));
        totalRollsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        totalRollsLabel.setText("Total Rolls: ");
        diceProbPanel.add(totalRollsLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 10, 90, -1));

        totalRollsVarLabel.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14));
        diceProbPanel.add(totalRollsVarLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 10, 40, -1));

        jLabel3.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14));
        jLabel3.setText("2");
        diceProbPanel.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, -1, -1));

        jLabel4.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14));
        jLabel4.setText("12");
        diceProbPanel.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(315, 190, -1, -1));

        jLabel6.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14));
        jLabel6.setText("4");
        diceProbPanel.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 190, -1, -1));

        jLabel7.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14));
        jLabel7.setText("7");
        diceProbPanel.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 190, -1, -1));

        jLabel8.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14));
        jLabel8.setText("6");
        diceProbPanel.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 190, -1, -1));

        jLabel9.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14));
        jLabel9.setText("5");
        diceProbPanel.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 190, -1, -1));

        jLabel10.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14));
        jLabel10.setText("3");
        diceProbPanel.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 190, -1, -1));

        jLabel11.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14));
        jLabel11.setText("8");
        diceProbPanel.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 190, -1, -1));

        jLabel12.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14));
        jLabel12.setText("9");
        diceProbPanel.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 190, -1, -1));

        jLabel5.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14));
        jLabel5.setText("10");
        diceProbPanel.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(255, 190, -1, -1));

        jLabel13.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14));
        jLabel13.setText("11");
        diceProbPanel.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(285, 190, -1, -1));

        twoBar.setBackground(new java.awt.Color(255, 51, 0));
        twoBar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        twoBar.setMaximumSize(new java.awt.Dimension(100, 100));
        twoBar.setOpaque(true);
        twoBar.setPreferredSize(new java.awt.Dimension(0, 50));
        diceProbPanel.add(twoBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 175, 20, 1));

        threeBar.setBackground(new java.awt.Color(255, 51, 0));
        threeBar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        threeBar.setOpaque(true);
        diceProbPanel.add(threeBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(45, 175, 20, 1));

        fourBar.setBackground(new java.awt.Color(255, 51, 0));
        fourBar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        fourBar.setOpaque(true);
        diceProbPanel.add(fourBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(75, 175, 20, 1));

        fiveBar.setBackground(new java.awt.Color(255, 51, 0));
        fiveBar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        fiveBar.setOpaque(true);
        diceProbPanel.add(fiveBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(105, 175, 20, 1));

        sixBar.setBackground(new java.awt.Color(255, 51, 0));
        sixBar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sixBar.setMaximumSize(new java.awt.Dimension(20, 100));
        sixBar.setOpaque(true);
        sixBar.setPreferredSize(new java.awt.Dimension(0, 50));
        diceProbPanel.add(sixBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(135, 175, 20, 1));

        sevenBar.setBackground(new java.awt.Color(255, 51, 0));
        sevenBar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sevenBar.setOpaque(true);
        diceProbPanel.add(sevenBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(165, 175, 20, 1));

        eightBar.setBackground(new java.awt.Color(255, 51, 0));
        eightBar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        eightBar.setOpaque(true);
        diceProbPanel.add(eightBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(195, 175, 20, 1));

        nineBar.setBackground(new java.awt.Color(255, 51, 0));
        nineBar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        nineBar.setOpaque(true);
        diceProbPanel.add(nineBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(225, 175, 20, 1));

        tenBar.setBackground(new java.awt.Color(255, 51, 0));
        tenBar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tenBar.setOpaque(true);
        diceProbPanel.add(tenBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(255, 175, 20, 1));

        elevenBar.setBackground(new java.awt.Color(255, 51, 0));
        elevenBar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        elevenBar.setOpaque(true);
        diceProbPanel.add(elevenBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(285, 175, 20, 1));

        twelveBar.setBackground(new java.awt.Color(255, 51, 0));
        twelveBar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        twelveBar.setOpaque(true);
        diceProbPanel.add(twelveBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(315, 175, 20, 1));

        gameInfoPanel.add(diceProbPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 360, 220));

        gameInformationLabel.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18));
        gameInformationLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gameInformationLabel.setText("Game Information");
        gameInfoPanel.add(gameInformationLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 380, -1));

        okGameInfoButton.setBackground(new java.awt.Color(239, 228, 176));
        okGameInfoButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        okGameInfoButton.setText("OK");
        okGameInfoButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        okGameInfoButton.setContentAreaFilled(false);
        okGameInfoButton.setFocusable(false);
        okGameInfoButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                okGameInfoButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                okGameInfoButtonMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                okGameInfoButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                okGameInfoButtonMouseReleased(evt);
            }
        });
        gameInfoPanel.add(okGameInfoButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 470, 110, 30));

        backGameInfoButton.setBackground(new java.awt.Color(239, 228, 176));
        backGameInfoButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        backGameInfoButton.setText("Back");
        backGameInfoButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        backGameInfoButton.setContentAreaFilled(false);
        backGameInfoButton.setFocusable(false);
        backGameInfoButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                backGameInfoButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                backGameInfoButtonMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                backGameInfoButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                backGameInfoButtonMouseReleased(evt);
            }
        });
        gameInfoPanel.add(backGameInfoButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 470, 110, 30));

        timeTheGameBeganLabel.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14));
        timeTheGameBeganLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        timeTheGameBeganLabel.setText("Time the game began:");
        gameInfoPanel.add(timeTheGameBeganLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 280, 150, -1));

        timeTheGameBeganVar.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14));
        timeTheGameBeganVar.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        gameInfoPanel.add(timeTheGameBeganVar, new org.netbeans.lib.awtextra.AbsoluteConstraints(165, 280, 180, -1));

        timeYouveBeenPlayingLabel.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14));
        timeYouveBeenPlayingLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        timeYouveBeenPlayingLabel.setText("Time you've been playing:");
        gameInfoPanel.add(timeYouveBeenPlayingLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 310, -1, -1));

        timeYouveBeenPlayingVar.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14));
        timeYouveBeenPlayingVar.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        gameInfoPanel.add(timeYouveBeenPlayingVar, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 310, -1, -1));

        timeEstimatedLeftLabel.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14));
        timeEstimatedLeftLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        timeEstimatedLeftLabel.setText("Time estimated left in game:");
        gameInfoPanel.add(timeEstimatedLeftLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 340, -1, -1));

        timeEstimatedLeftVar.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14));
        timeEstimatedLeftVar.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        gameInfoPanel.add(timeEstimatedLeftVar, new org.netbeans.lib.awtextra.AbsoluteConstraints(205, 340, -1, -1));

        getContentPane().add(gameInfoPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 380, 520));

        inGameOptionsPanel.setOpaque(false);
        inGameOptionsPanel.setPreferredSize(new java.awt.Dimension(381, 520));
        inGameOptionsPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        borderPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        borderPanel4.setOpaque(false);
        borderPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cheatsLabel.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 24));
        cheatsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cheatsLabel.setText("Cheats");
        borderPanel4.add(cheatsLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 5, 340, -1));

        cheatField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cheatFieldActionPerformed(evt);
            }
        });
        borderPanel4.add(cheatField, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 60, 220, -1));

        cheatButton.setBackground(new java.awt.Color(239, 228, 176));
        cheatButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        cheatButton.setText("Apply Cheat");
        cheatButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        cheatButton.setContentAreaFilled(false);
        cheatButton.setFocusable(false);
        cheatButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cheatButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                cheatButtonMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                cheatButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                cheatButtonMouseReleased(evt);
            }
        });
        borderPanel4.add(cheatButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 90, 105, 30));

        inGameOptionsPanel.add(borderPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 330, 340, 130));

        borderPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        borderPanel3.setFocusable(false);
        borderPanel3.setOpaque(false);
        borderPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        buildingPhaseBox.setBackground(new java.awt.Color(239, 228, 176));
        buildingPhaseBox.setSelected(true);
        buildingPhaseBox.setText("Automatically Display Extraordinary Building Phase");
        buildingPhaseBox.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        buildingPhaseBox.setFocusable(false);
        buildingPhaseBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buildingPhaseBoxActionPerformed(evt);
            }
        });
        borderPanel3.add(buildingPhaseBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        inGameOptionsPanel.add(borderPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 340, 120));

        borderPanel5.setBackground(new java.awt.Color(239, 228, 176));
        borderPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        borderPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        technicalOptionsLabel.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 24));
        technicalOptionsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        technicalOptionsLabel.setText("Technical Options");
        borderPanel5.add(technicalOptionsLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 5, 340, -1));

        volumeSlider.setBackground(new java.awt.Color(239, 228, 176));
        volumeSlider.setMaximum(10);
        volumeSlider.setSnapToTicks(true);
        volumeSlider.setValue(volumeInt);
        volumeSlider.setFocusable(false);
        volumeSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                volumeSliderMouseReleased(evt);
            }
        });
        borderPanel5.add(volumeSlider, new org.netbeans.lib.awtextra.AbsoluteConstraints(66, 60, -1, -1));

        softToLoudLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/settlerstrailstorails/resources/softToLoudLabel.png"))); // NOI18N
        borderPanel5.add(softToLoudLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(58, 90, -1, -1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12));
        jLabel1.setText("Sound Effect Volume");
        borderPanel5.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(71, 40, -1, -1));

        inGameOptionsPanel.add(borderPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, 340, 130));

        settingsLabel.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 24));
        settingsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        settingsLabel.setText("Game Settings");
        inGameOptionsPanel.add(settingsLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 340, -1));

        okButton.setBackground(new java.awt.Color(239, 228, 176));
        okButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        okButton.setText("OK");
        okButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        okButton.setContentAreaFilled(false);
        okButton.setFocusable(false);
        okButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                okButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                okButtonMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                okButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                okButtonMouseReleased(evt);
            }
        });
        inGameOptionsPanel.add(okButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 470, 110, 30));

        gameInfoButton.setBackground(new java.awt.Color(239, 228, 176));
        gameInfoButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        gameInfoButton.setText("Game Information");
        gameInfoButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        gameInfoButton.setContentAreaFilled(false);
        gameInfoButton.setFocusable(false);
        gameInfoButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                gameInfoButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                gameInfoButtonMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                gameInfoButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                gameInfoButtonMouseReleased(evt);
            }
        });
        inGameOptionsPanel.add(gameInfoButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 470, 130, 30));

        getContentPane().add(inGameOptionsPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 380, -1));

        backgroundLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/settlerstrailstorails/resources/MainMenuBackground.png"))); // NOI18N
        getContentPane().add(backgroundLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cheatFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cheatFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cheatFieldActionPerformed
    private void volumeSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_volumeSliderMouseReleased
        gameFrame.volumeInt=volumeSlider.getValue();
        MainFrame.volumeInt=volumeSlider.getValue();
        gameFrame.playSound("beep");
}//GEN-LAST:event_volumeSliderMouseReleased
    private void okButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_okButtonMouseEntered
        mouseOnBackButton=true;
}//GEN-LAST:event_okButtonMouseEntered
    private void okButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_okButtonMouseExited
        if(mouseOnBackButton&&buttonPressed){
            okButton.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
            okButton.setLocation(okButton.getX() + 1, okButton.getY());
        }
        mouseOnBackButton=false;
        buttonPressed=false;
}//GEN-LAST:event_okButtonMouseExited
    private void okButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_okButtonMousePressed
        gameFrame.playSound("click");
        okButton.setBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED));
        okButton.setLocation(okButton.getX()-1, okButton.getY());
        buttonPressed=true;
}//GEN-LAST:event_okButtonMousePressed
    private void okButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_okButtonMouseReleased
        buttonPressed=false;
        if(mouseOnBackButton) {
            okButton.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
            okButton.setLocation(okButton.getX() + 1, okButton.getY());
            this.setVisible(false);            
        }
    }//GEN-LAST:event_okButtonMouseReleased
    private void gameInfoButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gameInfoButtonMouseEntered
        mouseOnGameInfoButton=true;
    }//GEN-LAST:event_gameInfoButtonMouseEntered

    private void gameInfoButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gameInfoButtonMouseExited
        if(mouseOnGameInfoButton&&buttonPressed){
            gameInfoButton.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
            gameInfoButton.setLocation(gameInfoButton.getX() + 1, gameInfoButton.getY());
        }
        mouseOnGameInfoButton=false;
        buttonPressed=false;
    }//GEN-LAST:event_gameInfoButtonMouseExited
    private void gameInfoButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gameInfoButtonMousePressed
        gameFrame.playSound("click");
        gameInfoButton.setBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED));
        gameInfoButton.setLocation(gameInfoButton.getX()-1, gameInfoButton.getY());
        buttonPressed=true;
    }//GEN-LAST:event_gameInfoButtonMousePressed
    private void gameInfoButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gameInfoButtonMouseReleased
        buttonPressed=false;
        if(mouseOnGameInfoButton) {
            gameInfoButton.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
            gameInfoButton.setLocation(gameInfoButton.getX() + 1, gameInfoButton.getY());
            inGameOptionsPanel.setVisible(false);
            int[] dice= new int[13];
            for(int i=0;i<cumulativeRolls.size();i++){
                dice[cumulativeRolls.get(i)]++;
            }
            //find largest and set label height to 100
            int largest=0;
            for(int i=0;i<dice.length;i++){
                if(dice[i]>largest)largest=dice[i];
            }
            if(largest!=0){
                int height = 100 / largest;
                JLabel bar[]=new JLabel[13];
                bar[2]=twoBar;
                bar[3]=threeBar;
                bar[4]=fourBar;
                bar[5]=fiveBar;
                bar[6]=sixBar;
                bar[7]=sevenBar;
                bar[8]=eightBar;
                bar[9]=nineBar;
                bar[10]=tenBar;
                bar[11]=elevenBar;
                bar[12]=twelveBar;
                for(int i=2;i<13;i++){
                    for(int j = 0; j < (height * dice[i]); j++) {
                        JLabel l=new JLabel();
                        l.setIcon(barGraphLink);
                        diceProbPanel.add(l,new org.netbeans.lib.awtextra.AbsoluteConstraints(bar[i].getX(),175-j,-1,-1));
                    }
                    JLabel l=new JLabel();
                    l.setText(String.valueOf(dice[i]));
                    diceProbPanel.add(l,new org.netbeans.lib.awtextra.AbsoluteConstraints(bar[i].getX()+6,155-(height*dice[i]),-1,-1));
                }
            }
            totalRollsVarLabel.setText(String.valueOf(cumulativeRolls.size()));
            Date d = new Date();
            d.setTime(time);
            SimpleDateFormat dFormat = new SimpleDateFormat("hh:mm:ss aa");
            timeTheGameBeganVar.setText(dFormat.format(d));
            long newTime = System.currentTimeMillis();
            int difference = (int)(newTime-time);
            int seconds = difference/1000;
            int minutes = seconds/60;
            int hours = minutes/60;
            minutes=minutes-(hours*60);
            seconds=seconds-(minutes*60);
            timeYouveBeenPlayingVar.setText(hours+" H, "+minutes+" M, "+seconds+" S.");
            Player winningPlayer=null;
            for(int i=0;i<p.length;i++){
                if(winningPlayer==null && p[i]!=null){
                    winningPlayer=p[i];
                }else if(p[i].getNumberOfGoodsUndelivered()<winningPlayer.getNumberOfGoodsUndelivered()){
                    winningPlayer=p[i];
                }
            }
            //2 hours average game
            int multiplier;
            if(numOfPlayers==3)multiplier=12;
            else multiplier = 15;
            timeEstimatedLeftVar.setText("~"+winningPlayer.getNumberOfGoodsUndelivered()*multiplier+" Minutes");
            gameInfoPanel.setVisible(true);
        }
    }//GEN-LAST:event_gameInfoButtonMouseReleased
    private void cheatButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cheatButtonMouseEntered
        mouseOnCheatButton=true;
    }//GEN-LAST:event_cheatButtonMouseEntered
    private void cheatButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cheatButtonMouseExited
        if(mouseOnCheatButton&&buttonPressed){
            cheatButton.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
            cheatButton.setLocation(cheatButton.getX() + 1, cheatButton.getY());
        }
        mouseOnCheatButton=false;
        buttonPressed=false;
    }//GEN-LAST:event_cheatButtonMouseExited
    private void cheatButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cheatButtonMousePressed
        gameFrame.playSound("click");
        cheatButton.setBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED));
        cheatButton.setLocation(cheatButton.getX()-1, cheatButton.getY());
        buttonPressed=true;
    }//GEN-LAST:event_cheatButtonMousePressed
    private void cheatButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cheatButtonMouseReleased
       buttonPressed=false;
        if(mouseOnCheatButton) {
            cheatButton.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
            cheatButton.setLocation(cheatButton.getX() + 1, cheatButton.getY());
            String text = cheatField.getText();
            boolean cheatSuccess = true;
            if (text.equals("display")) {
                for (int i = 0; i < allMessages.size(); i++) {
                    System.out.println(allMessages.get(i));
                }
            } else if (text.equals("dice")) {
                game_Frame.chooseOwnDiceRolls(true);
            } else if (text.equals("names")) {
                String[] name = game_Frame.getNames();
                for (int i = 0; i < name.length; i++) {
                    System.out.println(name[i]);
                }
            } else if (text.equals("settlement")) {
                game_Frame.buildSettlement();
            } else if (text.equals("goodsSpokane")) {
                game_Frame.deliverGoods(game_Frame.spokane, game_Frame.currPlayer);
            } else if (text.equals("goodsRaleigh")) {
                game_Frame.deliverGoods(game_Frame.raleigh, game_Frame.currPlayer);
            } else if (text.equals("nextPlayer")) {
                game_Frame.nextPlayer();
            } else if (text.equals("ignorePurple")) {
                game_Frame.setPurple(true);
            } else if (text.equals("ignoreResources")) {
                game_Frame.setIgnoreResources(!game_Frame.getIgnoreResources());
            }  else if (text.equals("seeHands")) {
                game_Frame.setSeeHands();
            }  else if (text.equals("resources")) {
                currP.setCattle(currP.getCattle()+10);
                currP.setCoal(currP.getCoal()+10);
                currP.setWheat(currP.getWheat()+10);
                currP.setOre(currP.getOre()+10);
                currP.setLumber(currP.getLumber()+10);
                currP.setGold(currP.getGold()+10);
            }  else if (text.equals("minusGold")) {
                currP.setGold(0);
            }  else if (text.equals("hint")) {
                System.out.println(currP.compFindBestMove());
            }  else if (text.equals("minus")) {                
                currP.setCattle(0);
                currP.setCoal(0);
                currP.setWheat(0);
                currP.setOre(0);
                currP.setLumber(0);
                currP.setGold(0);
            }else {
                cheatSuccess = false;
            }
            if (!cheatSuccess) {
                if(scd!=null && scd.isVisible()){
                    scd.setVisible(false);
                }
                scd=new SettlersConfirmDialog(5);
                scd.setVisible(true);
            } else {
                if(scd!=null && scd.isVisible()){
                    scd.setVisible(false);
                }
                scd=new SettlersConfirmDialog(4);
                scd.setVisible(true);
            }
        }
    }//GEN-LAST:event_cheatButtonMouseReleased
    private void okGameInfoButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_okGameInfoButtonMouseEntered
        mouseOnOkGameInfoButton=true;
    }//GEN-LAST:event_okGameInfoButtonMouseEntered
    private void okGameInfoButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_okGameInfoButtonMouseExited
        if(mouseOnOkGameInfoButton&&buttonPressed){
            okGameInfoButton.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
            okGameInfoButton.setLocation(okGameInfoButton.getX() + 1, okGameInfoButton.getY());
        }
        mouseOnOkGameInfoButton=false;
        buttonPressed=false;
    }//GEN-LAST:event_okGameInfoButtonMouseExited
    private void okGameInfoButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_okGameInfoButtonMousePressed
        gameFrame.playSound("click");
        okGameInfoButton.setBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED));
        okGameInfoButton.setLocation(okGameInfoButton.getX()-1, okGameInfoButton.getY());
        buttonPressed=true;
    }//GEN-LAST:event_okGameInfoButtonMousePressed
    private void okGameInfoButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_okGameInfoButtonMouseReleased
        buttonPressed=false;
        if(mouseOnOkGameInfoButton) {
            okGameInfoButton.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
            okGameInfoButton.setLocation(okGameInfoButton.getX() + 1, okGameInfoButton.getY());
            this.setVisible(false);
        }
    }//GEN-LAST:event_okGameInfoButtonMouseReleased
    private void backGameInfoButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backGameInfoButtonMouseEntered
        mouseOnBackGameInfoButton=true;
    }//GEN-LAST:event_backGameInfoButtonMouseEntered
    private void backGameInfoButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backGameInfoButtonMouseExited
        if(mouseOnBackGameInfoButton&&buttonPressed){
            backGameInfoButton.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
            backGameInfoButton.setLocation(backGameInfoButton.getX() + 1, backGameInfoButton.getY());
        }
        mouseOnBackGameInfoButton=false;
        buttonPressed=false;
    }//GEN-LAST:event_backGameInfoButtonMouseExited
    private void backGameInfoButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backGameInfoButtonMousePressed
        gameFrame.playSound("click");
        backGameInfoButton.setBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED));
        backGameInfoButton.setLocation(backGameInfoButton.getX()-1, backGameInfoButton.getY());
        buttonPressed=true;
    }//GEN-LAST:event_backGameInfoButtonMousePressed
    private void backGameInfoButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backGameInfoButtonMouseReleased
        buttonPressed=false;
        if(mouseOnBackGameInfoButton) {
            backGameInfoButton.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
            backGameInfoButton.setLocation(backGameInfoButton.getX() + 1, backGameInfoButton.getY());
            gameInfoPanel.setVisible(false);
            inGameOptionsPanel.setVisible(true);
        }
    }//GEN-LAST:event_backGameInfoButtonMouseReleased

    private void buildingPhaseBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buildingPhaseBoxActionPerformed
        gameFrame.playSound("click");
        game_Frame.setIgnoreExtraordinaryBuildingPhase(!buildingPhaseBox.isSelected());
    }//GEN-LAST:event_buildingPhaseBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new InGameOptionsMenu().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel actualDiceProbLabel;
    private javax.swing.JButton backGameInfoButton;
    private javax.swing.JLabel backgroundLabel;
    private javax.swing.JPanel borderPanel3;
    private javax.swing.JPanel borderPanel4;
    private javax.swing.JPanel borderPanel5;
    private javax.swing.JCheckBox buildingPhaseBox;
    private javax.swing.JButton cheatButton;
    private javax.swing.JTextField cheatField;
    private javax.swing.JLabel cheatsLabel;
    private javax.swing.JPanel diceProbPanel;
    private javax.swing.JLabel eightBar;
    private javax.swing.JLabel elevenBar;
    private javax.swing.JLabel fiveBar;
    private javax.swing.JLabel fourBar;
    private javax.swing.JButton gameInfoButton;
    private javax.swing.JPanel gameInfoPanel;
    private javax.swing.JLabel gameInformationLabel;
    private javax.swing.JPanel inGameOptionsPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel nineBar;
    private javax.swing.JButton okButton;
    private javax.swing.JButton okGameInfoButton;
    private javax.swing.JLabel settingsLabel;
    private javax.swing.JLabel sevenBar;
    private javax.swing.JLabel sixBar;
    private javax.swing.JLabel softToLoudLabel;
    private javax.swing.JLabel technicalOptionsLabel;
    private javax.swing.JLabel tenBar;
    private javax.swing.JLabel threeBar;
    private javax.swing.JLabel timeEstimatedLeftLabel;
    private javax.swing.JLabel timeEstimatedLeftVar;
    private javax.swing.JLabel timeTheGameBeganLabel;
    private javax.swing.JLabel timeTheGameBeganVar;
    private javax.swing.JLabel timeYouveBeenPlayingLabel;
    private javax.swing.JLabel timeYouveBeenPlayingVar;
    private javax.swing.JLabel totalRollsLabel;
    private javax.swing.JLabel totalRollsVarLabel;
    private javax.swing.JLabel twelveBar;
    private javax.swing.JLabel twoBar;
    private javax.swing.JSlider volumeSlider;
    // End of variables declaration//GEN-END:variables
}
